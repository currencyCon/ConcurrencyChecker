
using ConcurrencyAnalyzer.Reporters;
using Microsoft.CodeAnalysis;

namespace ConcurrencyChecker.Analyzer
{
    public static class Rules
    {
        public static readonly DiagnosticDescriptor ExplicitThreadsRule = new DiagnosticDescriptor(ExplicitThreadsReporter.DiagnosticId, ExplicitThreadsReporter.Title, ExplicitThreadsReporter.MessageFormat, ExplicitThreadsReporter.Category, DiagnosticSeverity.Warning, true, ExplicitThreadsReporter.Description);
        public static readonly DiagnosticDescriptor FinalizerSynchronizationUsageRule = new DiagnosticDescriptor(FinalizerReporter.FinalizerSynchronizationDiagnosticId, FinalizerReporter.Title, FinalizerReporter.MessageFormatFinalizerSynchronization, FinalizerReporter.Category, DiagnosticSeverity.Warning, true, FinalizerReporter.Description);
        public static readonly DiagnosticDescriptor RuleFireAndForgetCallRule = new DiagnosticDescriptor(FireAndForgetReporter.FireAndForgetCallId, FireAndForgetReporter.Title, FireAndForgetReporter.MessageFormatFireAndForghet, FireAndForgetReporter.Category, DiagnosticSeverity.Warning, isEnabledByDefault: true, description: FireAndForgetReporter.Description);
        public static readonly DiagnosticDescriptor HalfSynchronizedRule = new DiagnosticDescriptor(HalfSynchronizedReporter.HalfSynchronizedChildDiagnosticId, HalfSynchronizedReporter.Title, HalfSynchronizedReporter.MessageFormatHalfSynchronized, HalfSynchronizedReporter.Category, DiagnosticSeverity.Warning, isEnabledByDefault: true, description: HalfSynchronizedReporter.Description);
        public static readonly DiagnosticDescriptor UnsynchronizedPropertyRule = new DiagnosticDescriptor(HalfSynchronizedReporter.UnsynchronizedPropertyId, HalfSynchronizedReporter.Title, HalfSynchronizedReporter.MessageFormatUnsychronizedProperty, HalfSynchronizedReporter.Category, DiagnosticSeverity.Warning, isEnabledByDefault:true, description: HalfSynchronizedReporter.Description);
        public static readonly DiagnosticDescriptor MonitorPulseRule = new DiagnosticDescriptor(MonitorOrWaitSignalReporter.MonitorPulseDiagnosticId, MonitorOrWaitSignalReporter.Title, MonitorOrWaitSignalReporter.MessageFormatPulse, MonitorOrWaitSignalReporter.Category, DiagnosticSeverity.Warning, true, MonitorOrWaitSignalReporter.Description);
        public static readonly DiagnosticDescriptor MonitorIfRule = new DiagnosticDescriptor(MonitorOrWaitSignalReporter.MonitorIfConditionDiagnosticId, MonitorOrWaitSignalReporter.Title, MonitorOrWaitSignalReporter.MessageFormatIf, MonitorOrWaitSignalReporter.Category, DiagnosticSeverity.Warning, true, MonitorOrWaitSignalReporter.Description);
        public static readonly DiagnosticDescriptor NestedLockingOneRule = new DiagnosticDescriptor(NestedSynchronizedMethodClassReporter.NestedLockingDiagnosticId, NestedSynchronizedMethodClassReporter.Title, NestedSynchronizedMethodClassReporter.MessageFormat, NestedSynchronizedMethodClassReporter.Category, DiagnosticSeverity.Warning, isEnabledByDefault: true, description: NestedSynchronizedMethodClassReporter.Description);
        public static readonly DiagnosticDescriptor NestedLockingTwoRule = new DiagnosticDescriptor(NestedSynchronizedMethodClassReporter.NestedLockingDiagnosticId2, NestedSynchronizedMethodClassReporter.Title, NestedSynchronizedMethodClassReporter.MessageFormat, NestedSynchronizedMethodClassReporter.Category, DiagnosticSeverity.Warning, isEnabledByDefault: true, description: NestedSynchronizedMethodClassReporter.Description);
        public static readonly DiagnosticDescriptor PrivateAsyncRule = new DiagnosticDescriptor(OverAsynchronyReporter.DiagnosticId, OverAsynchronyReporter.Title, OverAsynchronyReporter.MessageFormat, OverAsynchronyReporter.Category, DiagnosticSeverity.Warning, true, OverAsynchronyReporter.Description);
        public static readonly DiagnosticDescriptor NestedAsyncRule = new DiagnosticDescriptor(OverAsynchronyReporter.DiagnosticIdNestedAsync, OverAsynchronyReporter.Title, OverAsynchronyReporter.MessageFormatNestedAsync, OverAsynchronyReporter.Category, DiagnosticSeverity.Warning, true, OverAsynchronyReporter.Description);
        public static readonly DiagnosticDescriptor PrimitiveSynchronizationUsageRule = new DiagnosticDescriptor(PrimitiveSynchronizationReporter.PrimitiveSynchronizationDiagnosticId, PrimitiveSynchronizationReporter.Title, PrimitiveSynchronizationReporter.MessageFormatPrimitiveSynchronization, PrimitiveSynchronizationReporter.Category, DiagnosticSeverity.Warning, true, PrimitiveSynchronizationReporter.Description);
        public static readonly DiagnosticDescriptor TentativelyResourceReferenceRule = new DiagnosticDescriptor(TentativelyResourceReferenceReporter.DiagnosticId, TentativelyResourceReferenceReporter.Title, TentativelyResourceReferenceReporter.MessageFormatTentativelyResourceReference, TentativelyResourceReferenceReporter.Category, DiagnosticSeverity.Warning, true, TentativelyResourceReferenceReporter.Description);
        public static readonly DiagnosticDescriptor TapirRule = new DiagnosticDescriptor(TapirReporter.DiagnosticId, TapirReporter.Title, TapirReporter.MessageFormat, TapirReporter.Category, DiagnosticSeverity.Warning, true, TapirReporter.Description);
    }
}
